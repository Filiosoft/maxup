{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"maxup \ud83d\ude80 Deploy static websites quickly and easily to AWS S3! Disclaimer: This is a concept. Not an actual project. At least, at this point Deploy a Static Site Deploy a static site in three keystrokes! Requirements Fast From first keystroke to live website! Simple: One command deployment Cheap: Free or basically free Secure: Always secured with TLS Components There will be two components to this project. The CLI The command line interface will be the primary means of deploying websites. It will be simple but feature complete. The CLI will also supersede RVA-CLI , so it has to provide the same functionality as RVA. The API The API will serve as a sort of proxy to S3. It will provide authentication so that just any user can't publish to your website. The biggest challenge to this piece will be scalability. The API has to be able to proxy 100's of file uploads at once. The API will also handle provisioning of new buckets and CDNs. Flow Developer runs max maxup checks that it has permission to deploy this site max uploads all the sites files to the API API receives the upload (checks users's permissions) API creates an S3 bucket (if it doesn't exist) Concurrently, API does these API provisions CDN for the new S3 bucket (if it doesn't exist) API uploads files to the new S3 bucket API responds to max with the new site's address Tools & Language See #1 . Inspiration Inspiration for this project comes from thses projects: Surge.sh Zeit's Now","title":"Intro"},{"location":"#maxup","text":"\ud83d\ude80 Deploy static websites quickly and easily to AWS S3! Disclaimer: This is a concept. Not an actual project. At least, at this point","title":"maxup"},{"location":"#deploy-a-static-site","text":"Deploy a static site in three keystrokes!","title":"Deploy a Static Site"},{"location":"#requirements","text":"Fast From first keystroke to live website! Simple: One command deployment Cheap: Free or basically free Secure: Always secured with TLS","title":"Requirements"},{"location":"#components","text":"There will be two components to this project.","title":"Components"},{"location":"#the-cli","text":"The command line interface will be the primary means of deploying websites. It will be simple but feature complete. The CLI will also supersede RVA-CLI , so it has to provide the same functionality as RVA.","title":"The CLI"},{"location":"#the-api","text":"The API will serve as a sort of proxy to S3. It will provide authentication so that just any user can't publish to your website. The biggest challenge to this piece will be scalability. The API has to be able to proxy 100's of file uploads at once. The API will also handle provisioning of new buckets and CDNs.","title":"The API"},{"location":"#flow","text":"Developer runs max maxup checks that it has permission to deploy this site max uploads all the sites files to the API API receives the upload (checks users's permissions) API creates an S3 bucket (if it doesn't exist) Concurrently, API does these API provisions CDN for the new S3 bucket (if it doesn't exist) API uploads files to the new S3 bucket API responds to max with the new site's address","title":"Flow"},{"location":"#tools-language","text":"See #1 .","title":"Tools &amp; Language"},{"location":"#inspiration","text":"Inspiration for this project comes from thses projects: Surge.sh Zeit's Now","title":"Inspiration"},{"location":"api/","text":"The API Auth Flow User sends POST /auth with email address If the email exists, a magic link with a verification token is generated and sent to the provided email. Otherwise the user is created and then the magic link is sent. User repeatedly sends GET /auth/verify?email&token until it responds with a JWT token. User then uses the JWT token to authenticate to the API. Example Jim with jim@example.com sends a request to POST /auth like the following: curl -X POST \"https://api.maxup.sh/auth\" \\ -H \"Content-Type: application/json\" \\ -d '{ \"email\": \"jim@example.com\" }' The API checks if Jim has an account and creates an account one doesn't already exist. Then it sends an email to jim@example.com with a verification token (e.g. T1dmvPu36nmyYisXAs7IRzcR ). Jim then repeatedly sends a request to GET /auth/verify until it responds with a token after he clicks the magic link. Example: curl \"https://api.maxup.sh/auth/verify?email=jim@example.com&token=T1dmvPu36nmyYisXAs7IRzcR\" Jim then saves the token that was sent and uses it to authenticate to the API. Example: curl \"https://api.maxup.sh/whoami\" -H \"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ\" Endpoints The endpoints can be found here","title":"API Basics"},{"location":"api/#the-api","text":"","title":"The API"},{"location":"api/#auth-flow","text":"User sends POST /auth with email address If the email exists, a magic link with a verification token is generated and sent to the provided email. Otherwise the user is created and then the magic link is sent. User repeatedly sends GET /auth/verify?email&token until it responds with a JWT token. User then uses the JWT token to authenticate to the API.","title":"Auth Flow"},{"location":"api/#example","text":"Jim with jim@example.com sends a request to POST /auth like the following: curl -X POST \"https://api.maxup.sh/auth\" \\ -H \"Content-Type: application/json\" \\ -d '{ \"email\": \"jim@example.com\" }' The API checks if Jim has an account and creates an account one doesn't already exist. Then it sends an email to jim@example.com with a verification token (e.g. T1dmvPu36nmyYisXAs7IRzcR ). Jim then repeatedly sends a request to GET /auth/verify until it responds with a token after he clicks the magic link. Example: curl \"https://api.maxup.sh/auth/verify?email=jim@example.com&token=T1dmvPu36nmyYisXAs7IRzcR\" Jim then saves the token that was sent and uses it to authenticate to the API. Example: curl \"https://api.maxup.sh/whoami\" -H \"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ\"","title":"Example"},{"location":"api/#endpoints","text":"The endpoints can be found here","title":"Endpoints"},{"location":"cli/","text":"The CLI The command line interface will be the primary means of deploying websites. It will be simple but feature complete. The CLI will also supersede RVA-CLI , so it has to provide the same functionality as RVA. Features Simple Easy GitLab Review Apps Usage Deploy Website Deploy the current directory as a static website! Or specify the project path. $ max [project path] Login Login or create an account on the maxup API. $ max login Logout Logout of the maxup API. $ max logout Who Am I? Check who you are logged in as on the maxup API, $ max whoami List Websites List all the projects that you have access to. $ max list Destroy Website Destroy a published project. $ max destroy Initialize Config Initialize optional custom config and config required for Review Apps . $ max init Publish Review App Publish a static website Review App based on your base domain set with max init . $ max review start [name] Stop Review App Destroy an already published Review App . $ max review stop [name]","title":"The CLI"},{"location":"cli/#the-cli","text":"The command line interface will be the primary means of deploying websites. It will be simple but feature complete. The CLI will also supersede RVA-CLI , so it has to provide the same functionality as RVA.","title":"The CLI"},{"location":"cli/#features","text":"Simple Easy GitLab Review Apps","title":"Features"},{"location":"cli/#usage","text":"","title":"Usage"},{"location":"cli/#deploy-website","text":"Deploy the current directory as a static website! Or specify the project path. $ max [project path]","title":"Deploy Website"},{"location":"cli/#login","text":"Login or create an account on the maxup API. $ max login","title":"Login"},{"location":"cli/#logout","text":"Logout of the maxup API. $ max logout","title":"Logout"},{"location":"cli/#who-am-i","text":"Check who you are logged in as on the maxup API, $ max whoami","title":"Who Am I?"},{"location":"cli/#list-websites","text":"List all the projects that you have access to. $ max list","title":"List Websites"},{"location":"cli/#destroy-website","text":"Destroy a published project. $ max destroy","title":"Destroy Website"},{"location":"cli/#initialize-config","text":"Initialize optional custom config and config required for Review Apps . $ max init","title":"Initialize Config"},{"location":"cli/#publish-review-app","text":"Publish a static website Review App based on your base domain set with max init . $ max review start [name]","title":"Publish Review App"},{"location":"cli/#stop-review-app","text":"Destroy an already published Review App . $ max review stop [name]","title":"Stop Review App"},{"location":"api/endpoints/","text":"","title":"Endpoints"}]}